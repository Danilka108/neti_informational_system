//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "disciplines")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub curriculum_id: i32,
    pub type_id: i32,
    pub semester: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attestations::Entity")]
    Attestations,
    #[sea_orm(has_many = "super::classes::Entity")]
    Classes,
    #[sea_orm(
        belongs_to = "super::curriculums::Entity",
        from = "Column::CurriculumId",
        to = "super::curriculums::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Curriculums,
    #[sea_orm(
        belongs_to = "super::discipline_types::Entity",
        from = "Column::TypeId",
        to = "super::discipline_types::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    DisciplineTypes,
}

impl Related<super::attestations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attestations.def()
    }
}

impl Related<super::classes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Classes.def()
    }
}

impl Related<super::curriculums::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Curriculums.def()
    }
}

impl Related<super::discipline_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DisciplineTypes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
