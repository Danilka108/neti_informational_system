//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use super::sea_orm_active_enums::Qualification;
use super::sea_orm_active_enums::TrainingKind;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "study_groups")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    pub department_id: i32,
    pub studying_qualification: Qualification,
    pub training_kind: TrainingKind,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::classes_teachers::Entity")]
    ClassesTeachers,
    #[sea_orm(has_many = "super::study_groups_curriculums::Entity")]
    StudyGroupsCurriculums,
    #[sea_orm(has_many = "super::study_groups_students::Entity")]
    StudyGroupsStudents,
    #[sea_orm(
        belongs_to = "super::subdivisions::Entity",
        from = "Column::DepartmentId",
        to = "super::subdivisions::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Subdivisions,
}

impl Related<super::classes_teachers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ClassesTeachers.def()
    }
}

impl Related<super::study_groups_curriculums::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudyGroupsCurriculums.def()
    }
}

impl Related<super::study_groups_students::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudyGroupsStudents.def()
    }
}

impl Related<super::subdivisions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subdivisions.def()
    }
}

impl Related<super::curriculums::Entity> for Entity {
    fn to() -> RelationDef {
        super::study_groups_curriculums::Relation::Curriculums.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::study_groups_curriculums::Relation::StudyGroups
                .def()
                .rev(),
        )
    }
}

impl Related<super::students::Entity> for Entity {
    fn to() -> RelationDef {
        super::study_groups_students::Relation::Students.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::study_groups_students::Relation::StudyGroups
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
