//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "subdivisions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub university_id: i32,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::discipline_types::Entity")]
    DisciplineTypes,
    #[sea_orm(has_many = "super::study_groups::Entity")]
    StudyGroups,
    #[sea_orm(has_many = "super::subdivision_members::Entity")]
    SubdivisionMembers,
    #[sea_orm(has_many = "super::subdivisions_attributes::Entity")]
    SubdivisionsAttributes,
    #[sea_orm(has_many = "super::teachers::Entity")]
    Teachers,
    #[sea_orm(
        belongs_to = "super::universities::Entity",
        from = "Column::UniversityId",
        to = "super::universities::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Universities,
}

impl Related<super::discipline_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DisciplineTypes.def()
    }
}

impl Related<super::study_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudyGroups.def()
    }
}

impl Related<super::subdivision_members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubdivisionMembers.def()
    }
}

impl Related<super::subdivisions_attributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubdivisionsAttributes.def()
    }
}

impl Related<super::teachers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Teachers.def()
    }
}

impl Related<super::universities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Universities.def()
    }
}

impl Related<super::subdivision_attributes::Entity> for Entity {
    fn to() -> RelationDef {
        super::subdivisions_attributes::Relation::SubdivisionAttributes.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::subdivisions_attributes::Relation::Subdivisions
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
