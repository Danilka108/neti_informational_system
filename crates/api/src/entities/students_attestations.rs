//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "students_attestations")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub student_id: i32,
    #[sea_orm(primary_key)]
    pub attestation_id: i32,
    pub score: i32,
    pub rating_contributor_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::attestations::Entity",
        from = "Column::AttestationId",
        to = "super::attestations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Attestations,
    #[sea_orm(
        belongs_to = "super::persons::Entity",
        from = "Column::RatingContributorId",
        to = "super::persons::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Persons,
    #[sea_orm(
        belongs_to = "super::students::Entity",
        from = "Column::StudentId",
        to = "super::students::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Students,
}

impl Related<super::attestations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attestations.def()
    }
}

impl Related<super::persons::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Persons.def()
    }
}

impl Related<super::students::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Students.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
