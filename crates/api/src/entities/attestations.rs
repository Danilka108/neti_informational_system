//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use super::sea_orm_active_enums::AttestationKind;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "attestations")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub discipline_id: i32,
    pub kind: AttestationKind,
    #[sea_orm(column_type = "Double")]
    pub duration_in_hours: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attestations_examiners::Entity")]
    AttestationsExaminers,
    #[sea_orm(
        belongs_to = "super::disciplines::Entity",
        from = "Column::DisciplineId",
        to = "super::disciplines::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Disciplines,
    #[sea_orm(has_many = "super::students_attestations::Entity")]
    StudentsAttestations,
}

impl Related<super::attestations_examiners::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttestationsExaminers.def()
    }
}

impl Related<super::disciplines::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Disciplines.def()
    }
}

impl Related<super::students_attestations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudentsAttestations.def()
    }
}

impl Related<super::teachers::Entity> for Entity {
    fn to() -> RelationDef {
        super::attestations_examiners::Relation::Teachers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::attestations_examiners::Relation::Attestations
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
